spring:
  application:
    name: calculate-journey-variable-payments
  jpa:
    database: POSTGRESQL
    show-sql: false
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    platform: postgres
    url: ${APP_DB_URL}
    driverClassName: org.postgresql.Driver
  session:
    store-type: jdbc
    jdbc:
      initialize-schema: always
  security:
    oauth2:
      client:
        provider:
          hmpps:
            authorization-uri: ${HMPPS_AUTH_BASE_URI}/oauth/authorize
            token-uri: ${HMPPS_AUTH_BASE_URI}/oauth/token
            user-info-uri: ${HMPPS_AUTH_BASE_URI}/api/user/me
            user-name-attribute: name
        registration:
          hmpps:
            client-id: ${HMPPS_AUTH_CLIENT_ID}
            client-secret: ${HMPPS_AUTH_CLIENT_SECRET}
            provider: hmpps
            scope: read
            authorization-grant-type: authorization_code
            redirect-uri: ${HMPPS_AUTH_REDIRECT_BASE_URI}/login/oauth2/code/hmpps

resources:
  provider: s3
  endpoint.url: ${S3_ENDPOINT:}

import-files:
  locations: ${IMPORT_FILES_LOCATIONS}
  serco-prices: ${IMPORT_FILES_PRICES_SERCO}
  geo-prices: ${IMPORT_FILES_PRICES_GEO}

export-files:
  template: ${EXPORT_FILES_TEMPLATE}

server:
  port: 8080
  servlet:
    context-path: /
  forward-headers-strategy: native
  tomcat:
    remoteip:
      remote-ip-header: x-forwarded-for
      protocol_header: x-forwarded-proto
  shutdown: graceful
  error:
    include-message: always

management:
  endpoints:
    web:
      base-path: /
      exposure:
        include: 'info, health'

  endpoint:
    health:
      cache:
        time-to-live: 2000ms
      show-components: always
      show-details: always
      probes:
        enabled: true
    info:
      cache:
        time-to-live: 2000ms
logging:
  level:
    ROOT: INFO
